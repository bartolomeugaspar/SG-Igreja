#!/bin/bash

echo "üöÄ SGI Igreja - Script de Configura√ß√£o de Desenvolvimento"
echo "========================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar espa√ßo em disco
check_disk_space() {
    echo -e "${BLUE}üìä Verificando espa√ßo em disco...${NC}"
    df -h / | tail -1 | awk '{print "Uso: " $5 " | Dispon√≠vel: " $4}'
    
    USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ $USAGE -gt 90 ]; then
        echo -e "${RED}‚ö†Ô∏è  Aviso: Disco com mais de 90% de uso!${NC}"
        echo -e "${YELLOW}üí° Execute: sudo apt clean && sudo apt autoremove${NC}"
        return 1
    fi
    return 0
}

# Fun√ß√£o para verificar .NET
check_dotnet() {
    echo -e "${BLUE}üîç Verificando .NET SDK...${NC}"
    if command -v dotnet &> /dev/null; then
        VERSION=$(dotnet --version)
        echo -e "${GREEN}‚úÖ .NET SDK $VERSION instalado${NC}"
        return 0
    else
        echo -e "${RED}‚ùå .NET SDK n√£o encontrado${NC}"
        return 1
    fi
}

# Fun√ß√£o para verificar VS Code
check_vscode() {
    echo -e "${BLUE}üîç Verificando VS Code...${NC}"
    if command -v code &> /dev/null; then
        echo -e "${GREEN}‚úÖ VS Code instalado${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  VS Code n√£o encontrado no PATH${NC}"
        return 1
    fi
}

# Fun√ß√£o para instalar extens√µes do VS Code
install_extensions() {
    echo -e "${BLUE}üì¶ Instalando extens√µes do VS Code...${NC}"
    
    extensions=(
        "ms-dotnettools.csharp"
        "ms-dotnettools.vscode-dotnet-runtime"
        "formulahendry.dotnet-test-explorer"
        "jchannon.csharpextensions"
    )
    
    for ext in "${extensions[@]}"; do
        echo -e "${YELLOW}Instalando: $ext${NC}"
        code --install-extension "$ext" --force
    done
}

# Fun√ß√£o para limpar projeto
clean_project() {
    echo -e "${BLUE}üßπ Limpando projeto...${NC}"
    cd SGI_Igreja
    dotnet clean
    rm -rf bin obj
    cd ..
}

# Fun√ß√£o para restaurar depend√™ncias
restore_packages() {
    echo -e "${BLUE}üì¶ Restaurando pacotes NuGet...${NC}"
    cd SGI_Igreja
    
    # Tentar restaurar com timeout
    timeout 60s dotnet restore
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Pacotes restaurados com sucesso${NC}"
    elif [ $RESULT -eq 124 ]; then
        echo -e "${YELLOW}‚è∞ Timeout na restaura√ß√£o (pode ser problema de rede)${NC}"
    else
        echo -e "${RED}‚ùå Erro na restaura√ß√£o de pacotes${NC}"
    fi
    
    cd ..
    return $RESULT
}

# Fun√ß√£o para compilar projeto
build_project() {
    echo -e "${BLUE}üî® Compilando projeto...${NC}"
    cd SGI_Igreja
    
    dotnet build --no-restore
    RESULT=$?
    
    if [ $RESULT -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Projeto compilado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro na compila√ß√£o${NC}"
    fi
    
    cd ..
    return $RESULT
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}üéØ Iniciando configura√ß√£o...${NC}"
    
    # Verifica√ß√µes b√°sicas
    check_disk_space
    DISK_OK=$?
    
    check_dotnet
    DOTNET_OK=$?
    
    check_vscode
    VSCODE_OK=$?
    
    # Relat√≥rio de status
    echo ""
    echo -e "${BLUE}üìã Status do Ambiente:${NC}"
    echo "===================="
    
    if [ $DISK_OK -eq 0 ]; then
        echo -e "üíæ Espa√ßo em Disco: ${GREEN}OK${NC}"
    else
        echo -e "üíæ Espa√ßo em Disco: ${RED}PROBLEMA${NC}"
    fi
    
    if [ $DOTNET_OK -eq 0 ]; then
        echo -e "üîß .NET SDK: ${GREEN}OK${NC}"
    else
        echo -e "üîß .NET SDK: ${RED}N√ÉO INSTALADO${NC}"
    fi
    
    if [ $VSCODE_OK -eq 0 ]; then
        echo -e "üíª VS Code: ${GREEN}OK${NC}"
    else
        echo -e "üíª VS Code: ${YELLOW}N√ÉO ENCONTRADO${NC}"
    fi
    
    echo ""
    
    # A√ß√µes baseadas no status
    if [ $DOTNET_OK -eq 0 ] && [ $DISK_OK -eq 0 ]; then
        echo -e "${GREEN}üöÄ Ambiente pronto para desenvolvimento!${NC}"
        
        if [ $VSCODE_OK -eq 0 ]; then
            echo -e "${YELLOW}Deseja instalar extens√µes do VS Code? (y/n)${NC}"
            read -r response
            if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                install_extensions
            fi
        fi
        
        echo -e "${YELLOW}Deseja limpar e restaurar o projeto? (y/n)${NC}"
        read -r response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            clean_project
            restore_packages
            build_project
        fi
        
    else
        echo -e "${RED}‚ùå Ambiente n√£o est√° pronto${NC}"
        echo -e "${YELLOW}üí° Resolva os problemas acima antes de continuar${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üìö Comandos √öteis:${NC}"
    echo "=================="
    echo "‚Ä¢ dotnet restore          - Restaurar pacotes"
    echo "‚Ä¢ dotnet build           - Compilar projeto"
    echo "‚Ä¢ dotnet clean           - Limpar projeto"
    echo "‚Ä¢ code .                 - Abrir no VS Code"
    echo "‚Ä¢ ./dev-setup.sh         - Executar este script"
    echo ""
    echo -e "${GREEN}‚ú® Configura√ß√£o conclu√≠da!${NC}"
}

# Executar fun√ß√£o principal
main
